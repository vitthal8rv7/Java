package com.learn.java.mongodb.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.learn.java.mongodb.collection.Employee;
import com.learn.java.mongodb.repository.EmployeeAutogeneratedRepository;
import com.learn.java.mongodb.repository.EmployeeRepository;

@Service
public class EmployeeServiceImpl implements EmployeeService {

	private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeServiceImpl.class);

	@Autowired
	private EmployeeRepository employeeRepository;

	@Autowired
	private EmployeeAutogeneratedRepository empAutogeneratedRepo;

	@Override
	public Employee saveEmployee(Employee employee) {
		// TODO Auto-generated method stub
		return employeeRepository.save(employee);
	}

	@Override
	public Employee getEmployee(String id) {
		return employeeRepository.findById(id).get();
	}

	@Override
	public Employee updateEmployee(String id, String name) {
		Optional<Employee> employeeOp = employeeRepository.findById(id);
		if (employeeOp.isPresent()) {
			Employee employee = employeeOp.get();
			employee.setName(name);
			return employeeRepository.save(employee);
		} else
			return null;
	}

	@Override
	public String deleteEmployee(String id) {
		employeeRepository.deleteById(id);
		return "Employee Deleted Successfully";
	}

	@Override
	public List<Employee> getEmployeeBySalaryBetween(Float minSalary, Float maxSalary) {
		return employeeRepository.findBySalaryBetween(minSalary, maxSalary);
	}

	@Override
	public void testAutogeneratedAPIs() {

		//add 5 entries for testing
		LOGGER.info("Returns all instances of the type. : " + empAutogeneratedRepo.findAll());
		LOGGER.info("Returns the number of entities available. : " + empAutogeneratedRepo.count());

		Integer i = Integer.parseInt("" + (empAutogeneratedRepo.count() - 1));
		// Creating an example document
		Employee exampleEntity = empAutogeneratedRepo.findAll().get(i);
		 exampleEntity.setId("3");
		 exampleEntity.setName("name3");
		Example<Employee> example = Example.of(exampleEntity);

		// Counting the number of documents matching the example
		LOGGER.info("Counting the number of documents matching the example : " + empAutogeneratedRepo.count(example));

		 empAutogeneratedRepo.delete(empAutogeneratedRepo.findAll().get(i));
		 LOGGER.info("1 Document Deleted?");

		 empAutogeneratedRepo.deleteById("13");
		 LOGGER.info("1 Document Deleted.");

		LOGGER.info("Document Match? : " + empAutogeneratedRepo.equals(empAutogeneratedRepo.findAll().get(0)));
		LOGGER.info("Document Exist By Id? : " + empAutogeneratedRepo.existsById("1"));

		Sort sort = Sort.by(Sort.Direction.ASC, "name");
		LOGGER.info("Returns all instances of the type by sorting order. : " + empAutogeneratedRepo.findAll(sort));

		PageRequest pageRequest = PageRequest.of(0, 3);
		LOGGER.info("Returns all instances of the typ by pagination. : "
				+ empAutogeneratedRepo.findAll(pageRequest).get().collect(Collectors.toList()));

	}

}
