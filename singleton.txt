Singleton Class
————————-

What is singleton class?
———————————-
Class that has only one instance throughout the entire runtime of application and provides a global point of access to it. 

Singleton is a creational design pattern.  

How to use ?
———————

Guidelines
--------------
—> a private constructor
—> a static field containing its only instance
—> a static factory method for obtaining the instance
—> We'll also add an info property for later use only. 

Approach 1
———————
public final class ClassSingleton {

    private static ClassSingleton INSTANCE;
    private String info = "Initial info class";
    
    private ClassSingleton() {        
    }
    
    public static ClassSingleton getInstance() {
        if(INSTANCE == null) {
            INSTANCE = new ClassSingleton();
        }
        
        return INSTANCE;
    }

    // getters and setters
}

In Multithreading, there might be chance of creating more than one instance of singleton class.
There are some locking solutions available to solve this problem.(synchronise method or object)
 


Approach 2
——————-
public enum EnumSingleton {
    
    INSTANCE("Initial class info"); 
 
    private String info;
 
    private EnumSingleton(String info) {
        this.info = info;
    }
 
    public EnumSingleton getInstance() {
        return INSTANCE;
    }
    
    // getters and setters
}

Note: This approach has serialization and thread-safety guaranteed by the enum implementation itself. But Enums are Immutable so if we used this, we may lead tight coupling.



Where usually used?
———————————
Resource Managers: If your application requires a central point of control for accessing and managing shared resources like database connections, thread pools, or network connections, a singleton can help ensure efficient resource utilization.

Configuration Managers: A singleton can be used to manage application configuration settings that need to be accessible from various parts of your application.

Caching: Singletons can be used to implement caching mechanisms for frequently used data or expensive-to-compute results.

Logging: In logging frameworks, a singleton might be used to provide a centralized logging instance that aggregates logs from various parts of the application.

Registry or Service Locator: If you need a central registry or service locator to look up services or components, a singleton can help manage this.

Hardware Device Interfaces: If your application interacts with specific hardware devices (like printers or sensors), a singleton might provide a single interface to manage those interactions.

Application State Management: Singletons can be used to manage the state of an application, ensuring that the application state is consistent and can be accessed from different parts of the program.

GUI Components: In graphical user interface programming, a singleton can be used to manage the creation and access of GUI components like windows, dialogs, or menus.

Factories: Singleton patterns can be used to implement factory classes that create objects.

Database Connection Pooling: When dealing with database connections, a singleton connection pool manager can help control the number of open connections and efficiently manage them.



Problems with Singleton class if not used properly
————————————————————————-

Inflexibility: Singleton pattern can limit the flexibility of your codebase. If you later decide that you need multiple instances or variations of the Singleton, you might need to refactor extensively.

Global Impact of Changes: Modifying a Singleton can have far-reaching impacts across your codebase, potentially affecting many areas of your application.

Singletons in Clustered Environments: In distributed or clustered environments, Singleton patterns may behave differently and might not ensure a single instance across all nodes.

Data Spoil: When we run the tests, the production database gets spoiled with the test data, which is hardly acceptable.

Performance Slow: Synchronization might significantly affect the performance. 



Alternative Solutions: 
——————————-
Modern software design encourages dependency injection and favoring composition over inheritance. These alternatives often lead to more maintainable and testable code compared to using a Singleton.
