Scheduling
——————-
	to arrange for something to happen or be done at a particular time.

scheduling tasks or jobs at specified intervals or times is a common requirement in Enterprise Applications. To accomplish this, Java provides several mechanisms and libraries for task scheduling.

Diff ways for scheduling…
——————————————-
1.) java.util.Timer and java.util.TimerTask
2.) ScheduledExecutorService
3.) Cron Expressions with Quartz Scheduler
*4.) @Scheduled annotation

java.util.Timer and java.util.TimerTask
———————————————————-
	Timer and TimerTask are java util classes that we use to schedule tasks in a background thread. Basically, TimerTask is the task to perform, and Timer is the scheduler.

1.) void schedule(TimerTask task, Date time) 
	Schedules the specified task for execution at the specified time.
	(Simple: Schedule/run given task at given date for once)

2.) void schedule(TimerTask task, Date firstTime, long period) 
	Schedules the specified task for repeated fixed-delay execution, beginning at the specified time. 
	(Simple: Schedule/run given task at given date and repeat the same task after given time period)

3.) void schedule(TimerTask task, long delay) 
	Schedules the specified task for execution after the specified delay. 
	(Simple: Schedule/run given task after given delay for once.)

4.)  void schedule(TimerTask task, long delay, long period) 
	Schedules the specified task for repeated fixed-delay execution, beginning after the specified delay. 
	(Simple: Schedule/run given task after given delay and repeat the same task after given time period)

fixed-rate = true;
5.) void scheduleAtFixedRate(TimerTask task, Date firstTime, long period) 
	Schedules the specified task for repeated fixed-rate execution, beginning at the specified time. 
	(Simple: Schedule/run given task at given date and repeat the same task after time period),  fixed-rate = true;

fixed-rate = true;
6.) void scheduleAtFixedRate(TimerTask task, long delay, long period) Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay.
	(Simple: Schedule/run given task after given delay and repeat the same task after given time period),  fixed-rate = true;






Fixed-rate vs Fixed-delay
————————————-
Fixed-rate timers (scheduleAtFixedRate()) are based on the starting time (so each iteration will execute at startTime + iterationNumber * delayTime).
	In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to "catch up.”

Fixed-delay timers (schedule()) are based on the previous execution (so each iteration will execute at lastExecutionTime + delayTime).
	In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well.
	Aside from this, there is no difference. You will not find a significance performance difference, either.
			SIMPLE
		———————————
Fixed-rate: Complete all the scheduled task which were pending due to delay in execution
Fixed-delay: Ignore all the scheduled task which were pending due to delay in execution

Condition
————————-
after starting if OS got some priority task to execute, OS will pause our task and work on priority task, OS complete it and return back to our task, 
	then Fixed-rate and Fixed-delay work differently in this condition
For example OS pause out task for 1hr/60min
Fixed-rate: 
	fixed-rate will check how much delay was there, here 60min then
fixed-rate will check how many execution should happen till now….
(For example: 60/5 => 12, we miss 12 execution)
Then, to complete this 12 executions, it will not run task after every 5 min,

	It will continuously run task until we catchup with execution number of current time 
Then It will work as expected like run 1 task after every 5min…
If its happens again, it will run task continuously again until catchup with execution number of current time.

 
Fixed-delay:  It will not think much, it will check lastExecution+fixedDelay time(5min) <= current time [mean, we last completed last task before 5 or more times] then run(repeat) task again.
Here lastExecution + 60min > 5min delay so It will execution 
	But ONLY ONCE, NOT 12 time, it will not think like in last 60min we cloud complete 12 task, we should complete it now, no, it will ignore it.

NOTE: use Fixed-Rate or Fixed-Delay AS per requirement.
Example:
public void givenUsingTimer_whenSchedulingTaskOnce_thenCorrect() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
        }
    };
    Timer timer = new Timer("Timer");
    long delay = 1000L;
    timer.schedule(task, delay); 
}


ScheduledExecutorService
—————————————-
It is part of the java.util.concurrent package and allows you to schedule tasks with more control.

Timer can be sensitive to changes in the system clock; ScheduledThreadPoolExecutor isn't. 

Timer has only one execution thread; ScheduledThreadPoolExecutor can be configured with any number of threads. 

Runtime Exceptions thrown inside the TimerTask kill the thread, so the following scheduled tasks won't run further; with ScheduledThreadExecutor, the current task will be cancelled, but the rest will continue to run.

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class MyScheduler {
    public static void main(String[] args) {
        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
        Runnable task = () -> {
            // Your task logic here
            System.out.println("Task executed.");
        };

        // Schedule the task to run after an initial delay and then every 1 second
        scheduler.scheduleAtFixedRate(task, 1, 1, TimeUnit.SECONDS);
    }
}


Cron Expressions with Quartz Scheduler:
————————————————————-
The Quartz Scheduler is a powerful library for scheduling jobs in Java applications.
It allows you to use cron expressions to define complex scheduling patterns.
You can schedule jobs with specific timing and recurrence patterns.

import org.quartz.*;
import org.quartz.impl.StdSchedulerFactory;

public class MyScheduler {
    public static void main(String[] args) throws SchedulerException {
        Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();

        JobDetail job = JobBuilder.newJob(MyJob.class)
            .withIdentity("myJob", "group1")
            .build();

        Trigger trigger = TriggerBuilder.newTrigger()
            .withIdentity("myTrigger", "group1")
            .withSchedule(CronScheduleBuilder.cronSchedule("0/5 * * * * ?"))
            .build();

        scheduler.start();
        scheduler.scheduleJob(job, trigger);
    }
}




@Scheduled
———————-
The @Scheduled annotation is used to trigger the scheduler for a specific time period.
The @EnableScheduling annotation is used to enable the scheduler for your application. This annotation should be added into the main Spring Boot application class file.

The rules need to follow to annotate a method with @Scheduled are: 
1.) The method should have a void return type (if not, the returned value will be ignored) 
2.) The method should not expect any parameters

Add scheduled annotation on methods only.

Examples:	
1.) @Scheduled(fixedDelay = 1000)
	execute a task to run after a fixed delay

2.) @Scheduled(fixedRate = 1000)
	execute a task at a fixed interval of time

3.) @Scheduled(fixedDelay = 1000, initialDelay = 1000)
	The task will be executed the first time after the initialDelay value, and it will continue to be executed according to the fixedDelay.

4.) @Scheduled(cron = "0 15 10 15 * ?”)
	Sometimes delays and rates are not enough, and we need the flexibility of a cron expression to control the schedule of our tasks

Spring will use the server's local time zone for the cron expression. However, we can use the zone attribute to change this timezone
@Scheduled(cron = "0 15 10 15 * ?", zone = “Europe/Paris")
(“Second, Minute, Hours, Day Of Month, Month, Day Of Week, Year”, zone=“”)

Hardcoding these schedules is simple, but we usually need to be able to control the schedule without re-compiling and re-deploying the entire app.
We'll make use of Spring Expressions to externalize the configuration of the tasks, and we'll store these in properties files.
@Scheduled(fixedDelayString = “${fixedDelay.in.milliseconds}")
@Scheduled(fixedRateString = “${fixedRate.in.milliseconds}")
@Scheduled(cron = "${cron.expression}")

By default, Spring uses a local single-threaded scheduler to run the tasks. As a result, even if we have multiple @Scheduled methods, they each need to wait for the thread to complete executing a previous task. If our tasks are truly independent, it's more convenient to run them in parallel. For that, we need to provide a TaskScheduler that better suits our needs:

@Bean
public TaskScheduler  taskScheduler() {
    ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();
    threadPoolTaskScheduler.setPoolSize(5);
    threadPoolTaskScheduler.setThreadNamePrefix("ThreadPoolTaskScheduler");
    return threadPoolTaskScheduler;
}
If we use Spring Boot, we can make use of an even more convenient approach to increase the scheduler's pool size
It's simply enough to set the spring.task.scheduling.pool.size property:
spring.task.scheduling.pool.size=5


If we want to support parallel behavior in scheduled tasks, we need to add the @Async annotation
@EnableAsync
public class ScheduledFixedRateExample {
    @Async
    @Scheduled(fixedRate = 1000)
    public void scheduleFixedRateTaskAsync() throws InterruptedException {
        System.out.println(
          "Fixed rate task async - " + System.currentTimeMillis() / 1000);
        Thread.sleep(2000);
    }

}

The @EnableAsync annotation is used to enable the parallel execution for your application. This annotation can be added into class in which you want to use but we should add it into the main Spring Boot application class file so that Async concept is available to entire application instead of specific class.


Second Minute Hours Day Of Month Month Day Of Week Year

Asterisk (*): Represents "every" or "any" value for the field.
Comma (,): Allows you to specify a list of values. [At specific value]
Hyphen (-): Specifies a range of values. [0-11 or JAN-AUG]
Slash (/): Introduces step values. (Every / UnitPlace) => 0 0/5 14 * * ? Every 5min 

Question Mark (?): Used in the day of the month and day of the week fields to represent "no specific value" or "don't care." It is often used when one of these fields is not relevant for the task.

L (last): Used in the day of the month and day of the week fields to represent "the last" value. 

W (weekday): Used in the day of the month field to find the nearest weekday to a specified day. 

# (nth): Used in the day of the week field to specify the nth occurrence of a particular day within the month.


1.) ( * * * * * * ) ==> every second, every minute, every hour, every day of month, every month, every day of week, every year



When you use "0/2" in a field, it means the task should run every "2 units" starting from "0" within that field.
When you use "*/2" in a field, it means the task should run every "2 units" within that field, without specifying a starting point.
In the minute field (the first field), "2/3" means "start at the 2nd minute of the hour and then every 3 minutes after that.”
#: Week Number Of Day # nth occurrence of month
Example A-1 Cron Expressions
Second | Minute | Hours | Day Of Month | Month | Day Of Week | Year
————————————————————————————————————————
* * * * * * * 
(every sec, every min, every hour, every day, every month, every year)

* 0 * * * * *
(every sec, once at 0th min, every hour, every day, every month, every year)

* 25 * * * * *	
(every sec, once at 25th min, every hour, every day, every month, every year)

* 0/5 * * * * *	
(every sec, every 5min start at 0th min, every hour, every day, every month, every year)

* 1/5 * * * * * 	
(every sec, every 5min start at 1st min, every hour, every day, every month, every year)

* 2/5 * * * * * 	
(every sec, every 5min start at 2nd min, every hour, every day, every month, every year)

* 0-5 * * * ? *	
(every sec, every min of 1st 5min, every hour, every day, every month, every year)

* 1, 12, 22, 58 * * * ? *
(every sec, (1st, 12th, 22nd, 58th) min, every hour, every day, every month, every year)

* 1, 12, 14-19, 22, 58 * * * ? *
(every sec, (1st, 12th, 14th to 19th(14, 15, 16, 17, 18 19), 22nd, 58th) min, every hour, every day, every month, every year)


0 * * * * * * 
(once(0th sec), every min, every hour, every day, every month, every year)

0 0 * * * * *
(once(0th sec), once at 0th min, every hour, every day, every month, every year)

0 25 * * * * *	
(once(0th sec), once at 25th min, every hour, every day, every month, every year)

0 0/5 * * * * *	
(once(0th sec), every 5min start at 0th min, every hour, every day, every month, every year)

0 1/5 * * * * * 	
(once(0th sec), every 5min start at 1st min, every hour, every day, every month, every year)

0 2/5 * * * * * 	
(once(0th sec), every 5min start at 2nd min, every hour, every day, every month, every year)

0 0-5 * * * ? *	
(once(0th sec), every min of 1st 5min, every hour, every day, every month, every year)

0 1, 12, 22, 58 * * * ? *
(once(0th sec),(1st, 12th, 22nd, 58th) min, every hour, every day, every month, every year)

0 1, 12, 14-19, 22, 58 * * * ? *
(once(0th sec),(1st, 12th, 14th to 19th(14, 15, 16, 17, 18 19), 22nd, 58th) min, every hour, every day, every month, every year)


0 * 0 * * * * 
(once(0th sec), every min, once at 0th hr, every day, every month, every year)

0 0 0 * * * *
(once(0th sec), once at 0th min, once at 0th hr, every day, every month, every year)

0 25 0 * * * *	
(once(0th sec), once at 25th min, once at 0th hr, every day, every month, every year)

0 0/5 0 * * * *	
(once(0th sec), every 5min start at 0th min, once at 0th hr, every day, every month, every year)

0 1/5 0 * * * * 	
(once(0th sec), every 5min start at 1st min, once at 0th hr, every day, every month, every year)

0 2/5 0 * * * * 	
(once(0th sec), every 5min start at 1st min, once at 0th hr, every day, every month, every year)

0 0-5 0 * * ? *	
(once(0th sec), every min of 1st 5min, once at 0th hr, every day, every month, every year)

0 1, 12, 22, 58 0 * * ? *
(once(0th sec),(1st, 12th, 22nd, 58th) min, once at 0th hr, every day, every month, every year)

0 1, 12, 14-19, 22, 58 0 * * ? *
(once(0th sec),(1st, 12th, 14th to 19th(14, 15, 16, 17, 18 19), 22nd, 58th) min, once at 0th hr, every day, every month, every year)
