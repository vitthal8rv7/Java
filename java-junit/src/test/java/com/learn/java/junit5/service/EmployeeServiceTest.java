package com.learn.java.junit5.service;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import java.util.Date;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.learn.java.junit5.collection.Employee;
import com.learn.java.junit5.repository.EmployeeAutogeneratedRepository;

public class EmployeeServiceTest {

	public static final Logger LOGGER = LoggerFactory.getLogger(EmployeeServiceTest.class);
	//Which service we want to test
	@InjectMocks
	private EmployeeServiceImpl employeeService;
	
	//declare the dependencies
//	private EmployeeAPIsDeclWithQueryRepository empApisDeclWithQueryRepo;

	@Mock
	private EmployeeAutogeneratedRepository empAutogeneratedRepo;

	@BeforeEach
	void setup() {
		LOGGER.info("Initializing before each tests.");
		MockitoAnnotations.openMocks(this);
	}
	
	@Test
	public void saveEmployeeTest() {
		LOGGER.info("Testing saveEmployee Operation");
		//Given
		Employee employee = Employee
				.builder()
				.name("emp1")
				.department("dept1")
				.salary(123.4f)
				.dateOfJoining(new Date(System.currentTimeMillis()))
				.build();
		
		Employee savedEmployee = Employee
				.builder()
				.name("emp1")
				.department("dept1")
				.salary(123.4f)
				.id("123enen2onrjlwfw")
				.build();
		
		//Mock the calls
		Mockito.when(empAutogeneratedRepo.save(null)).thenReturn(new RuntimeException("Employee object should not be null."));
		Mockito.when(empAutogeneratedRepo.save(employee)).thenReturn(savedEmployee);
				
		//When
		savedEmployee = employeeService.saveEmployee(employee);
		
		//Then
		Assertions.assertNotNull(savedEmployee);
		Assertions.assertEquals(savedEmployee.getName(), "emp1");
		Assertions.assertEquals(savedEmployee.getDepartment(), "dept1");
		
		//Verify empAutogeneratedRepo.save(employee); calls only once (in employeeService.saveEmployee(employee); ) 
		verify(empAutogeneratedRepo, times(1)).save(employee);
		
		
		//When		
		//Then
		Assertions.assertThrows(NullPointerException.class, () -> employeeService.saveEmployee(null));

		LOGGER.info("Tested saveEmployee Operation");
	}
	
	
}
