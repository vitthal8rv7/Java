package com.learn.java.junit5.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.learn.java.junit5.collection.Employee;
import com.learn.java.junit5.repository.EmployeeAPIsDeclWithQueryRepository;
import com.learn.java.junit5.repository.EmployeeAPIsDeclarationRepository;
import com.learn.java.junit5.repository.EmployeeAutogeneratedRepository;
import com.learn.java.junit5.repository.EmployeeRepository;

@Service
public class EmployeeServiceImpl implements EmployeeService {

	private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeServiceImpl.class);

	@Autowired
	private EmployeeRepository employeeRepository;

	@Autowired
	private EmployeeAPIsDeclWithQueryRepository empApisDeclWithQueryRepo;

	@Autowired
	private EmployeeAutogeneratedRepository empAutogeneratedRepo;

	@Autowired
	private EmployeeAPIsDeclarationRepository empApisDeclRepo;

	@Override
	public Employee saveEmployee(Employee employee) {
		if(Objects.isNull(employee)) {
			throw new NullPointerException("Employee object should not be null.");
		}
		employee.setDateOfJoining(new Date(System.currentTimeMillis()));
		return empAutogeneratedRepo.save(employee);
	}

	@Override
	public Employee getEmployee(String id) {
		if(Objects.isNull(id)) {
			throw new NullPointerException("Employee id should not be null.");
		}
		return empAutogeneratedRepo.findById(id).get();
	}

	@Override
	public Employee updateEmployee(String id, String name) {
		if(StringUtils.isBlank(id)) {
			throw new NullPointerException("Employee id should not be null.");
		}
		if(StringUtils.isBlank(name)) {
			throw new NullPointerException("Employee name should not be null.");
		}
		Optional<Employee> employeeOp = empAutogeneratedRepo.findById(id);
		if (employeeOp.isPresent()) {
			Employee employee = employeeOp.get();
			employee.setName(name);
			return empAutogeneratedRepo.save(employee);
		} else
			return null;
	}

	@Override
	public String deleteEmployee(String id) {
		empAutogeneratedRepo.deleteById(id);
		return "Employee Deleted Successfully";
	}

	@Override
	public List<Employee> getEmployeeBySalaryBetween(Float minSalary, Float maxSalary) {
		return empApisDeclWithQueryRepo.findBySalaryBetween(minSalary, maxSalary);
	}

	@Override
	public void testAutogeneratedAPIs() {

		// add 5 entries for testing
		LOGGER.info("Returns all instances of the type. : " + empAutogeneratedRepo.findAll());
		LOGGER.info("Returns the number of entities available. : " + empAutogeneratedRepo.count());

		Integer i = Integer.parseInt("" + (empAutogeneratedRepo.count() - 1));
		// Creating an example document
		Employee exampleEntity = empAutogeneratedRepo.findAll().get(i);
		exampleEntity.setId("3");
		exampleEntity.setName("name3");
		Example<Employee> example = Example.of(exampleEntity);

		// Counting the number of documents matching the example
		LOGGER.info("Counting the number of documents matching the example : " + empAutogeneratedRepo.count(example));

		empAutogeneratedRepo.delete(empAutogeneratedRepo.findAll().get(i));
		LOGGER.info("1 Document Deleted?");

		empAutogeneratedRepo.deleteById("13");
		LOGGER.info("1 Document Deleted.");

		LOGGER.info("Document Match? : " + empAutogeneratedRepo.equals(empAutogeneratedRepo.findAll().get(0)));
		LOGGER.info("Document Exist By Id? : " + empAutogeneratedRepo.existsById("1"));

		Sort sort = Sort.by(Sort.Direction.ASC, "name");
		LOGGER.info("Returns all instances of the type by sorting order. : " + empAutogeneratedRepo.findAll(sort));

		PageRequest pageRequest = PageRequest.of(0, 3);
		LOGGER.info("Returns all instances of the typ by pagination. : "
				+ empAutogeneratedRepo.findAll(pageRequest).get().collect(Collectors.toList()));

	}

	@Override
	public void testDeclAPIs() {
//		Employee exampleEntity = empAutogeneratedRepo.findAll().get(0);
//		exampleEntity.setId("11");
//		exampleEntity.setName("name11");
//		empAutogeneratedRepo.save(exampleEntity);
//		exampleEntity.setId("11copy1");
//		exampleEntity.setName("name11");
//		empAutogeneratedRepo.save(exampleEntity);
//		
		LOGGER.info("find all By name: " + empApisDeclRepo.findByName("name11"));
		LOGGER.info("find first By name: " + empApisDeclRepo.findFirstByName("name11"));
		LOGGER.info("find Top By name: " + empApisDeclRepo.findTopByName("name11"));
		LOGGER.info(
				"find first By name Ordered by name DESC: " + empApisDeclRepo.findFirstByNameOrderByNameDesc("name11"));
		LOGGER.info("find first By name Ordered by id DESC: " + empApisDeclRepo.findFirstByNameOrderByIdDesc("name11"));
		LOGGER.info("find first By name Ignore case Ordered by id DESC : "
				+ empApisDeclRepo.findFirstByNameIgnoreCaseOrderByIdDesc("namE11"));
		LOGGER.info("find all By name Ignore Case: " + empApisDeclRepo.findByNameIgnoreCase("NAme11"));
		LOGGER.info(
				"find all By name Ignore Case and Ends With: " + empApisDeclRepo.findByNameIgnoreCaseEndsWith("E11"));
		LOGGER.info("find all By name Ignore Case and Starts With: "
				+ empApisDeclRepo.findByNameIgnoreCaseStartsWith("NAME"));
		LOGGER.info("find First By name Ignore Case and Starts With: "
				+ empApisDeclRepo.findFirstByNameIgnoreCaseStartsWith("NAME"));
		LOGGER.info(
				"find First By name is not Ignore Case: " + empApisDeclRepo.findFirstByNameIsNotIgnoreCase("aNAME"));
		LOGGER.info(
				"find First By name is not Ignore Case: " + empApisDeclRepo.findFirstByNameIsNotIgnoreCase("name1"));
		LOGGER.info("find All By name is not Ignore Case: " + empApisDeclRepo.findAllByNameIsNotIgnoreCase("aNAME"));
		LOGGER.info("find All By name is not Ignore Case: " + empApisDeclRepo.findAllByNameIsNotIgnoreCase("name1"));

		LOGGER.info("find Distinct By name: " + empApisDeclRepo.findDistinctByName("name11"));
		LOGGER.info("count by name: " + empApisDeclRepo.countByName("name11"));
		LOGGER.info("count by Name Containing: " + empApisDeclRepo.countByNameContaining("name"));
		LOGGER.info("find By name Regex: " + empApisDeclRepo.findByNameRegex("^name.*"));
		// The ^ in the regex pattern represents the start of the string, and .*
		// represents any characters after "name".

		List<String> names = new ArrayList<>();
		names.add("name4");
		names.add("name130");
		names.add("name3");
		LOGGER.info("find By list of names: " + empApisDeclRepo.findByNameIn(names));
		LOGGER.info("find By which are not from list of names: " + empApisDeclRepo.findByNameIsNotIn(names));
//		LOGGER.info("find All By list of names: " + empApisDeclRepo.findByNames(names));

//		LOGGER.info("find First By name Ignore Case and Not Starts With: " + empApisDeclRepo.findFirstByNameIsNotIgnoreCaseStartsWith("NAME"));		
//		LOGGER.info("find First By name Ignore Case and Not Starts With: " + empApisDeclRepo.findFirstByNameIgnoreCaseStartsWithIsNot("NAME", "NAME"));
//		Error creating bean

//		LOGGER.info("find one By name: " + empApisDeclRepo.findOneByName("name11")); 
//		 Exception saying => returned non unique result

		LOGGER.info("find all By department: " + empApisDeclRepo.findByDepartment("department1"));
		LOGGER.info("find first By department: " + empApisDeclRepo.findFirstByDepartment("department1"));
//		LOGGER.info("find last By department: " + empApisDeclRepo.findLastByDepartment("department1"));
		// Exception saying => returned non unique result

		System.out.println();
		System.out.println();
		LOGGER.info(
				"find all By name and department: " + empApisDeclRepo.findByNameAndDepartment("name1", "department1"));

		System.out.println();
		System.out.println();
		LOGGER.info(
				"find all By name or department: " + empApisDeclRepo.findByNameOrDepartment("name1", "department1"));

//		System.out.println();
//		System.out.println();
//		LOGGER.info("find all By name null or department: " + empApisDeclRepo.findByNameNullOrDepartment("name1", "department1"));
//		LOGGER.info("find all By name null or department: " + empApisDeclRepo.findByNameNullOrDepartment("name1", null));
//		LOGGER.info("find all By name null or department: " + empApisDeclRepo.findByNameNullOrDepartment(null, "department1"));
//		LOGGER.info("find all By name null or department: " + empApisDeclRepo.findByNameNullOrDepartment(null, null));

		names.add("name1");
		LOGGER.info(
				"find all By names or department: " + empApisDeclRepo.findByNameInAndDepartment(names, "department1"));
		LOGGER.info("find all By names and department ignore case and order by id: "
				+ empApisDeclRepo.findFirstByNameAndDepartmentAllIgnoreCaseOrderByIdDesc("name11", "department1"));

		LOGGER.info("find all By city : " + empApisDeclRepo.findByAddresses_CityIn("city3"));
		LOGGER.info("find all By city and address1 : "
				+ empApisDeclRepo.findByAddresses_CityAndAddresses_Address1("city1", "address111"));
		LOGGER.info("find all By name, city and address1 : "
				+ empApisDeclRepo.findByNameAndAddresses_CityAndAddresses_Address1("name1", "city1", "address111"));
	}

	@Override
	public void testDeclAPIsWithQuery() {
		Float salary = 12345.0f;
		Float minSalary = 12345.0f;
		Float maxSalary = 42345.0f;
		String name = "name1";
		String department = "department1";
		Sort sort = Sort.by(Sort.Direction.ASC, "name");
		PageRequest pageRequest = PageRequest.of(0, 3);
		Integer limit = 2;
		LOGGER.info("Find by salary between min salary and max salary : "+ empApisDeclWithQueryRepo.findBySalaryBetween(minSalary, maxSalary));
		LOGGER.info("Find by salary : "+ empApisDeclWithQueryRepo.findBySalary(salary));
		LOGGER.info("Find by name, department and salary : "+ empApisDeclWithQueryRepo.findByNameAndDepartmentAndSalary(name, department, salary));
		LOGGER.info("Find by salary sorted : "+ empApisDeclWithQueryRepo.findBySalarySorted(salary, sort));
		LOGGER.info("Find by salary pagination: "+ empApisDeclWithQueryRepo.findBySalaryPagination(salary, pageRequest));
//		LOGGER.info("Find by salary sorted and pagination: "+ empApisDeclWithQueryRepo.findBySalaryPaginationSorted(salary, pageRequest, sort));

		LOGGER.info("Find by salary sorted and limited: "+ empApisDeclWithQueryRepo.findBySalarySortedAndLimited(salary, sort, limit));
		LOGGER.info("find Projected By Name And Salary: "+ empApisDeclWithQueryRepo.findProjectedByNameAndSalary(salary));

		String key = "name1"; //"name1"; "department1";
		LOGGER.info("find By Name Or Department: "+ empApisDeclWithQueryRepo.findByNameOrDepartment(key));
		
		LOGGER.info("find By name Regex: " + empApisDeclWithQueryRepo.findByNameRegex("^name.*")); 
		
		List<String> names = new ArrayList<>();
		names.add("name11");
		names.add("game");
		names.add("lol");
		LOGGER.info("find By names In: " + empApisDeclWithQueryRepo.findByNamesIn(names));
		
		LOGGER.info("find By Addresses Exists: " + empApisDeclWithQueryRepo.findByAddressesExists(false));
		
		LOGGER.info("find Projected By Name And Department: " + empApisDeclWithQueryRepo.findProjectedByNameAndDepartment(salary, sort));
		
//		LOGGER.info("find By Text Search: " + empApisDeclWithQueryRepo.findByTextSearch("1"));
//		 Command failed with error 27 (IndexNotFound): 'text index required for $text query' 
		
		LOGGER.info("Find by salary between min salary and max salary : "+ empApisDeclWithQueryRepo.findBySalaryBetweenEq(minSalary, maxSalary));
		
		LOGGER.info("find By Salary And Department : "+ empApisDeclWithQueryRepo.findBySalaryAndDepartment(salary, department));
		
		LOGGER.info("find By Salary1 Or Salary2 : "+ empApisDeclWithQueryRepo.findBySalary1OrSalary2(salary, maxSalary));
		
		LOGGER.info("find By Not Matched Salary : "+ empApisDeclWithQueryRepo.findByNotMatchedSalary(salary));
		
		LOGGER.info("find By Number Of Addresses : "+ empApisDeclWithQueryRepo.findByNumberOfAddresses(2));
		
		LOGGER.info("find By Addresses_City : "+ empApisDeclWithQueryRepo.findByAddressesCity("city3"));
		
		LOGGER.info("find By Name Or Department Regex : "+ empApisDeclWithQueryRepo.findByNameOrDepartmentRegex(".*me.*"));
		
		List<String> cities = new ArrayList<>();
		cities.add("city3");
		cities.add("city11");
		LOGGER.info("find By Addresses Cities : "+ empApisDeclWithQueryRepo.findByAddressesCities(cities));
		
		LOGGER.info("Find by salary between min salary and max salary : "+ empApisDeclWithQueryRepo.findBySalaryBetweenEq(minSalary, maxSalary));
		LOGGER.info("Find by salary between min salary and max salary : "+ empApisDeclWithQueryRepo.findBySalaryBetweenUsingNor(minSalary, maxSalary));
		
		LOGGER.info("find By Joining Date Before : "+ empApisDeclWithQueryRepo.findByJoiningDateBefore(new Date(System.currentTimeMillis())));
		
		LOGGER.info("find By Joining Date In Between Given Time : "+ empApisDeclWithQueryRepo.findByJoiningDateBetween(new Date(System.currentTimeMillis()-900000), new Date(System.currentTimeMillis())));
		
		names = new ArrayList<>();
		names.add("name4");
		names.add("name1");
		names.add("name3");
		LOGGER.info("find By names not In: " + empApisDeclWithQueryRepo.findByNamesNotIn(names));
		
		LOGGER.info("find By Addresses_City : "+ empApisDeclWithQueryRepo.findByAddressesCity("city11"));
		LOGGER.info("find By Addresses_City at Index 0 : "+ empApisDeclWithQueryRepo.findByAddressesCityIndex0("city11"));

		LOGGER.info("find By Addresses_Address1_Address2_City : "+ empApisDeclWithQueryRepo.findByAddressesAddress1AndAddress2AndCity("address111", "address2", "city11"));
		LOGGER.info("find By Addresses_Address1_Address2_City : "+ empApisDeclWithQueryRepo.findByAddressesAddress1AndAddress2AndCity("address11", "address22", "city1"));
		LOGGER.info("find By Addresses_Address1_Address2_City : "+ empApisDeclWithQueryRepo.findByAddressesAddress1AndAddress2AndCity("address11", "address22", "city11"));
		
		LOGGER.info("find By Addresses_Address1_Address2_City : "+ empApisDeclWithQueryRepo.findByAddressesElectmentsWithProjection("address111", "address2", "city11"));
		
		
		LOGGER.info("find By name type: " + empApisDeclWithQueryRepo.findByNameType("string"));
		LOGGER.info("find By name type in number: " + empApisDeclWithQueryRepo.findByNameType(2));
		
		LOGGER.info("find By salary type: " + empApisDeclWithQueryRepo.findBySalaryType("int"));
		LOGGER.info("find By salary type: " + empApisDeclWithQueryRepo.findBySalaryType("long"));
		LOGGER.info("find By salary type: " + empApisDeclWithQueryRepo.findBySalaryType("double"));
		LOGGER.info("find By salary type in number: " + empApisDeclWithQueryRepo.findBySalaryType(1));
		
		List<String> types = new ArrayList<>();
		types.add("int");
		types.add("double");
		types.add("long");
		LOGGER.info("find By salary type: " + empApisDeclWithQueryRepo.findBySalaryType(types));
		/* Type and In Number
		 * double => 	1
		 * string => 	2
		 * object => 	3
		 * array =>  	4
		 * objectId => 	7
		 * bool => 		8
		 * date => 		9
		 * int =>    	16
		 * long =>   	18
		 * */
		LOGGER.info("find By salary type and equal : " + empApisDeclWithQueryRepo.findBySalaryTypeAndEq("double", 12345.0f));

//		LOGGER.info("find By Text Search : " + empApisDeclWithQueryRepo.findByTextSearch("12345"));
//		'text index required for $text query' on server localhost:27017
		
	
	
	}

}
